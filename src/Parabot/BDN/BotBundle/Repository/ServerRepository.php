<?php

namespace Parabot\BDN\BotBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Parabot\BDN\BotBundle\Entity\Servers\Server;
use Parabot\BDN\UserBundle\Entity\User;

/**
 * ServerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServerRepository extends EntityRepository {
    /**
     * @param $id
     *
     * @return Server
     */
    public function findById($id) {
        /**
         * @var Server|null $server
         */
        $server = $this->findOneBy([ 'id' => $id ]);

        return $server;
    }

    public function notExistingNameWithoutID($id, $name) {
        $result = $this->findBy([ 'name' => $name ]);

        /**
         * @var Server $item
         */
        foreach($result as $item) {
            if($item->getId() == $id) {
                if($name != $item->getName()) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @param User $user
     * @param int  $id
     *
     * @return bool
     */
    public function hasAccess(User $user, $id) {
        /**
         * @var Server $result
         */
        $result = $this->findOneBy([ 'id' => $id ]);

        if(count($result->getGroups()) > 0) {
            foreach($result->getGroups() as $group) {
                if($user->hasGroupId($group->getId())) {
                    return true;
                }
            }
        } else {
            return true;
        }

        return false;
    }

    /**
     * @param User $user
     *
     * @param bool $isDeveloper
     *
     * @return Server[]
     */
    public function findForUser(User $user, $isDeveloper = false) {
        /**
         * @var Server[] $result
         */
        $result  = $this->findAll();
        $servers = [];

        foreach($result as $server) {
            if(count($server->getGroups()) > 0) {
                foreach($server->getGroups() as $group) {
                    if($user->hasGroupId($group->getId()) || $isDeveloper === true) {
                        $servers[] = $server;
                        break;
                    }
                }
            } else {
                $servers[] = $server;
            }
        }

        return $servers;
    }
}